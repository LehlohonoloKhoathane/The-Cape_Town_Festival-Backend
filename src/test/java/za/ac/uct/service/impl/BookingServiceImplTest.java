package za.ac.uct.service.impl;
/*
package za.ac.uct.service.impl;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import za.ac.uct.domain.Booking;
import za.ac.uct.domain.Event;
import za.ac.uct.domain.Driver;
import za.ac.uct.domain.security.User;
import za.ac.uct.repository.BookingRepository;
import za.ac.uct.service.impl.BookingServiceImpl;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class BookingServiceImplTest {

    @InjectMocks
    private BookingServiceImpl bookingService;

    @Mock
    private BookingRepository bookingRepository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void createBookingTest() {
        // Create a Booking instance with the necessary attributes (user, event, driver, dates)
        Booking booking = new Booking();

        // Create instances of User, Event, and Driver
        User user = new User(); // You need to set user properties as needed
        Event event = new Event(); // You need to set event properties as needed
        Driver driver = new Driver(); // You need to set driver properties as needed

        // Set the attributes in the Booking object
        booking.setUser(user);
        booking.setEvent(event);
        booking.setDriver(driver);
        booking.setBookingDate(LocalDateTime.now());
        booking.setReturnedDate(LocalDateTime.now().plusDays(1));

        // Mock the behavior of the repository's save method
        when(bookingRepository.save(booking)).thenReturn(booking);

        // Test the create method (save)
        Booking createdBooking = bookingService.create(booking);

        assertNotNull(createdBooking);
        // The ID will be generated by your JPA provider, so there's no need to set it explicitly here.
    }


    @Test
    public void readBookingTest() {
        int bookingId = 1;
        Booking booking = new Booking();
        booking.setId(bookingId);

        // Mock the behavior of the repository
        when(bookingRepository.findById(bookingId)).thenReturn(Optional.of(booking));

        // Test the read method
        Booking readBooking = bookingService.read(bookingId);

        assertNotNull(readBooking);
        assertEquals(bookingId, readBooking.getId());

        // Verify that the findById method was called
        verify(bookingRepository).findById(bookingId);
    }

    @Test
    public void updateBookingTest() {
        int bookingId = 1;
        Booking existingBooking = new Booking();
        existingBooking.setId(bookingId);

        Booking updatedBooking = new Booking();
        updatedBooking.setId(bookingId);
        updatedBooking.setBookingDate(LocalDateTime.now());
        updatedBooking.setReturnedDate(LocalDateTime.now().plusDays(1));

        // Mock the behavior of the repository
        when(bookingRepository.findById(bookingId)).thenReturn(Optional.of(existingBooking));
        when(bookingRepository.save(existingBooking)).thenReturn(existingBooking);

        // Test the update method
        Booking result = bookingService.updateById(bookingId, updatedBooking);


        assertNotNull(result);
        assertEquals(bookingId, result.getId());

        // Verify that the findById and save methods were called
        verify(bookingRepository).findById(bookingId);
        verify(bookingRepository).save(existingBooking);
    }

    @Test
    public void deleteBookingTest() {
        int bookingId = 1;

        // Test the delete method
        boolean result = bookingService.delete(bookingId);

        // Verify that the deleteById method was called
        verify(bookingRepository).deleteById(bookingId);

        assertEquals(true, result);
    }

    @Test
    public void getAllBookingsTest() {
        List<Booking> bookings = new ArrayList<>();
        bookings.add(new Booking());
        bookings.add(new Booking());

        // Mock the behavior of the repository
        when(bookingRepository.findAll()).thenReturn(bookings);

        // Test the getAll method
        List<Booking> result = bookingService.getAll();

        assertNotNull(result);
        assertEquals(2, result.size());

        // Verify that the findAll method was called
        verify(bookingRepository).findAll();
    }
}
*/
